name: Deploy to AWS

on:
  workflow_dispatch:
    inputs:
      region:
        description: "AWS region to deploy to"
        type: choice
        options:
          - us-east-2
        default: "us-east-2"
      stage:
        description: "AWS environment to deploy to"
        type: choice
        options:
          - prod
        default: "prod"

env:
  REGISTRY: "154006474850.dkr.ecr.${{ inputs.region }}.amazonaws.com"
  REPOSITORY: "theproductcollectiveco/play4s-service-prod"

jobs:
  build-and-publish:
    name: Build and publishLocal
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Install sbt
        run: |
          echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | sudo tee /etc/apt/sources.list.d/sbt.list
          curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x99E82A75642AC823" | sudo apt-key add
          sudo apt-get update
          sudo apt-get install -y sbt

      - name: Cache sbt dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
            ~/.coursier
          key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}
          restore-keys: |
            ${{ runner.os }}-sbt-

      - name: Clean, compile, and build Docker image
        run: |
          sbt clean compile app/docker:publishLocal

      - name: Save Docker image as tarball
        run: |
          IMAGE_TAG="latest"
          docker save -o image.tar $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  push-to-ecr:
    name: Push
    runs-on: ubuntu-latest
    needs: build-and-publish

    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        id: load-image
        run: |
          docker load -i image.tar

      - name: Push Docker image to ECR
        run: |
          docker tag $REGISTRY/$REPOSITORY:latest $REGISTRY/$REPOSITORY:latest
          docker push $REGISTRY/$REPOSITORY:latest

      - name: Extract IMAGE_DIGEST
        id: extract-digest
        run: |
          IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $REGISTRY/$REPOSITORY:latest | grep -oE 'sha256:[a-f0-9]{64}')
          echo "IMAGE_TAG=$IMAGE_DIGEST" >> $GITHUB_ENV

      - name: Tag Docker image with digest
        run: |
          docker tag $REGISTRY/$REPOSITORY:latest $REGISTRY/$REPOSITORY:$IMAGE_TAG

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: push-to-ecr

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.region }}

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        id: load-image
        run: |
          IMAGE_TAG="latest"
          docker load -i image.tar
          IMAGE_ID=$(docker inspect --format='{{.Id}}' $REGISTRY/$REPOSITORY:$IMAGE_TAG)
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

      - name: Define image variables
        id: define-image
        run: |
          IMAGE_TAG="$IMAGE_ID"

      - name: CDK prepare
        working-directory: ./infrastructure
        run: npm ci

      - name: Deploy with CDK
        working-directory: ./infrastructure
        env:
          REGISTRY: $REGISTRY
          REPOSITORY: $REPOSITORY
          IMAGE_TAG: $IMAGE_TAG
        run: |
          if ! command -v cdk &> /dev/null; then
            npm install -g aws-cdk
          fi
          cdk synth
          cdk deploy --all --require-approval never --outputs-file cdk-outputs.json

      - name: Query Load Balancer DNS Name
        working-directory: ./infrastructure
        run: |
          echo "Load Balancer DNS Name:"
          cat cdk-outputs.json | jq -r '.["app-play4s-service-prod-load-balanced-fargate-service-stack"] | to_entries[] | select(.key | startswith("LoadBalancerConstructLoadBalancerDNSName")) | .value'
